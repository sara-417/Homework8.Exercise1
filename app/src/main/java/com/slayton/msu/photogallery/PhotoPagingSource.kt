package com.slayton.msu.photogallery

import androidx.paging.PagingSource
import androidx.paging.PagingState
import com.slayton.msu.photogallery.api.FlickrApi
import com.slayton.msu.photogallery.api.GalleryItem


// controls the paging, takes API as the param
// i used the documentation to build my understanding of what this class needed to accomplish,
// but used chatGPT to help me actually build the class, and I used what I learned from the
// documentation to change what didn't make sense
class PhotoPagingSource(
    private val flickrApi: FlickrApi
): PagingSource<Int, GalleryItem>() {
    override suspend fun load(params: LoadParams<Int>): LoadResult<Int, GalleryItem> {
        return try {

            val page = params.key ?: 1
            val items = flickrApi.fetchPhotos(page).photos.galleryItems

            LoadResult.Page(
                data = items,
//                if its the first page, then there is no previous, else its the current minus one
                prevKey = if (page == 1) null else page - 1,
//                if its the last page then there is no next, else its the current plus one
                nextKey = if (items.isEmpty()) null else page + 1
            )
        } catch (exception: Exception) {
            LoadResult.Error(exception)
        }
    }


//    this was autogenerated by AndriodStudio
    override fun getRefreshKey(state: PagingState<Int, GalleryItem>): Int? {
//    the internal components taken directly from the documentation on PagingSource: https://developer.android.com/reference/kotlin/androidx/paging/PagingSource
        return state.anchorPosition?.let {
            state.closestPageToPosition(it)?.prevKey?.plus(1)
                ?: state.closestPageToPosition(it)?.nextKey?.minus(1)
        }

    }
}